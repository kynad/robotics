

1. Get the .pgm
2. Convert it to 2Dx2D map
2.1. Reduce 2Dx2D map to contain only the connected component containing the initial location.
2.2. Count the amount of free cells for later logging.
3. Calculate minimum spanning tree on the 2Dx2D map from a given initial location.
5. Calculate Hamiltonian cycle on a decomposition of the 2Dx2D map to a DxD map.
6. Start traversing over the Hamiltonian cycle, until complete.
6.1. TODO: What happens if a certain cell wasn't accessible? (a) Why would that happen, but (b) why is there a requirement to log how many cells were covered by the robot?
7. Log the results as required:
7.1. The amount of accesible cells from initial robot location.
7.2. The amount of cells covered by the robot.
7.3. Total coverage time. 


Design:
-------

Offline Component:

1. Map converter - Can convert a map with given cells size to a new map with a different cell size.
2. MST - Given a map, can find the minimal spanning tree of that map. #1 and #2 are the same class.
3. Path - Given the above can find the Hamiltoian cycle. Will return that cycle as a list of (i,j) indeces. Consider splitting between this and the rest.


Robot component:
Is able to traverse one cell (i.e. its self-length) to each of the four directions, with API including either four functions of movement (e.g. moveUp, moveLeft()), or one with a parameter (e.g. moveCell("up")).

Main component:
Inits offline component, waits for offline calculations (timeout?).
Translates the path received from the offline component
Inits the robot component, starts the main loop that will guide the robot which cell to go to, until the cycle is complete


Possible roadmap:
1. Get the gazebo running with rectangular bot
2. Create the bot class, make its main accept the four commands (either via topic, or via function call from the main, that will (for now) read from topic)
3. Create the map converter, have a main for it that would display the converted map
4. Find the MST and draw it
5. Find the Hamilton cycle and draw it
6. Output list of directions and manually check that it follows the Hamiltonian cycle (drawn on the map)
7. Create the main component that will combine everything



